"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  makeParser: () => makeParser,
  makePromiseParser: () => makePromiseParser,
  parseBodyAs: () => parseBodyAs,
  parseCookieAs: () => parseCookieAs,
  parseDataAs: () => parseDataAs,
  parseHeaderAs: () => parseHeaderAs,
  parseParamsAs: () => parseParamsAs,
  parseQueryAs: () => parseQueryAs,
  z: () => import_zod.z
});
module.exports = __toCommonJS(src_exports);
var import_h3 = require("h3");
var import_zod = require("zod");
var apiValidateWithSchema = (data, schema, statusCode, statusMessage) => {
  try {
    return schema.parse(data);
  } catch (error) {
    throw (0, import_h3.createError)({
      statusCode,
      statusMessage,
      data: error
    });
  }
};
async function parseBodyAs(event, schema, errorCode = 422, errorMessage = "Body parsing failed") {
  const data = await (0, import_h3.readBody)(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseParamsAs(event, schema, errorCode = 422, errorMessage = "Parameter parsing failed") {
  const data = event.context.params;
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseQueryAs(event, schema, errorCode = 422, errorMessage = "Query parsing failed") {
  const data = (0, import_h3.getQuery)(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseCookieAs(event, schema, errorCode = 422, errorMessage = "Cookie parsing failed") {
  const data = (0, import_h3.parseCookies)(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseHeaderAs(event, schema, errorCode = 422, errorMessage = "Header parsing failed") {
  const data = (0, import_h3.getHeaders)(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
async function parseDataAs(dataOrPromise, schema, errorCode = 422, errorMessage = "Data parsing failed") {
  const data = await dataOrPromise;
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function makeParser(schema, errorCode = 422, errorMessage = "Data parsing failed") {
  return (data, errorCodeOverwrite = void 0, errorMessageOverwrite = void 0) => {
    return apiValidateWithSchema(data, schema, errorCodeOverwrite || errorCode, errorMessageOverwrite || errorMessage);
  };
}
function makePromiseParser(schema, errorCode = 422, errorMessage = "Data-promise parsing failed") {
  return async (promise, errorCodeOverwrite = void 0, errorMessageOverwrite = void 0) => {
    const data = await promise;
    return apiValidateWithSchema(data, schema, errorCodeOverwrite || errorCode, errorMessageOverwrite || errorMessage);
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  makeParser,
  makePromiseParser,
  parseBodyAs,
  parseCookieAs,
  parseDataAs,
  parseHeaderAs,
  parseParamsAs,
  parseQueryAs,
  z
});
