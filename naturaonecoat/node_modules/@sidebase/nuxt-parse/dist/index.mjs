// src/index.ts
import { createError, readBody, getQuery, getHeaders, parseCookies } from "h3";
import { z } from "zod";
var apiValidateWithSchema = (data, schema, statusCode, statusMessage) => {
  try {
    return schema.parse(data);
  } catch (error) {
    throw createError({
      statusCode,
      statusMessage,
      data: error
    });
  }
};
async function parseBodyAs(event, schema, errorCode = 422, errorMessage = "Body parsing failed") {
  const data = await readBody(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseParamsAs(event, schema, errorCode = 422, errorMessage = "Parameter parsing failed") {
  const data = event.context.params;
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseQueryAs(event, schema, errorCode = 422, errorMessage = "Query parsing failed") {
  const data = getQuery(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseCookieAs(event, schema, errorCode = 422, errorMessage = "Cookie parsing failed") {
  const data = parseCookies(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function parseHeaderAs(event, schema, errorCode = 422, errorMessage = "Header parsing failed") {
  const data = getHeaders(event);
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
async function parseDataAs(dataOrPromise, schema, errorCode = 422, errorMessage = "Data parsing failed") {
  const data = await dataOrPromise;
  return apiValidateWithSchema(data, schema, errorCode, errorMessage);
}
function makeParser(schema, errorCode = 422, errorMessage = "Data parsing failed") {
  return (data, errorCodeOverwrite = void 0, errorMessageOverwrite = void 0) => {
    return apiValidateWithSchema(data, schema, errorCodeOverwrite || errorCode, errorMessageOverwrite || errorMessage);
  };
}
function makePromiseParser(schema, errorCode = 422, errorMessage = "Data-promise parsing failed") {
  return async (promise, errorCodeOverwrite = void 0, errorMessageOverwrite = void 0) => {
    const data = await promise;
    return apiValidateWithSchema(data, schema, errorCodeOverwrite || errorCode, errorMessageOverwrite || errorMessage);
  };
}
export {
  makeParser,
  makePromiseParser,
  parseBodyAs,
  parseCookieAs,
  parseDataAs,
  parseHeaderAs,
  parseParamsAs,
  parseQueryAs,
  z
};
