import { MessageChannel } from 'worker_threads';
import { ViteNodeServer } from 'vite-node/server';
import { relative } from 'pathe';
import pc from 'picocolors';
import Tinypool from 'tinypool';
import { createBirpc } from 'birpc';
import { cpus } from 'os';
import { createPath } from '../tree.js';
export function useCollectStories(options, ctx) {
    const { server } = options;
    const node = new ViteNodeServer(server, {
        deps: {
            inline: [
                /histoire\/dist/,
                /@histoire\/[\w\d-]+\/dist/,
                /histoire-[\w\d-]+\/dist/,
                /@vue\/devtools-api/,
                /vuetify/,
                ...ctx.config.viteNodeInlineDeps ?? [],
            ],
        },
        transformMode: ctx.config.viteNodeTransformMode,
    });
    const threadsCount = ctx.mode === 'dev'
        ? Math.max(cpus().length / 2, 1)
        : Math.max(cpus().length - 1, 1);
    const threadPool = new Tinypool({
        filename: new URL('./worker.js', import.meta.url).href,
        // WebContainer compatibility (Stackblitz)
        useAtomics: typeof process.versions.webcontainer !== 'string',
        maxThreads: threadsCount,
        minThreads: threadsCount,
    });
    function clearCache() {
        server.moduleGraph.invalidateAll();
        node.fetchCache.clear();
    }
    function createChannel() {
        const channel = new MessageChannel();
        const port = channel.port2;
        const workerPort = channel.port1;
        createBirpc({
            fetchModule: (id) => node.fetchModule(id),
            resolveId: (id, importer) => node.resolveId(id, importer),
        }, {
            post: data => port.postMessage(data),
            on: data => port.on('message', data),
        });
        return {
            port,
            workerPort,
        };
    }
    async function executeStoryFile(storyFile) {
        try {
            const { workerPort } = createChannel();
            const { storyData } = await threadPool.run({
                root: server.config.root,
                base: server.config.base,
                storyFile,
                port: workerPort,
            }, {
                transferList: [
                    workerPort,
                ],
            });
            if (storyData.length === 0) {
                console.warn(pc.yellow(`⚠️  No story found for ${storyFile.path}`));
                return;
            }
            else if (storyData.length > 1) {
                console.warn(pc.yellow(`⚠️  Multiple stories not supported: ${storyFile.path}`));
            }
            storyFile.id = storyData[0].id;
            storyFile.story = storyData[0];
            storyFile.treeFile = {
                title: storyData[0].title,
                path: relative(server.config.root, storyFile.path),
            };
            storyFile.treePath = createPath(ctx.config, storyFile.treeFile);
            storyFile.story.title = storyFile.treePath[storyFile.treePath.length - 1];
        }
        catch (e) {
            console.error(pc.red(`Error while collecting story ${storyFile.path}:\n${e.frame ? `${pc.bold(e.message)}\n${e.frame}` : e.stack}`));
            if (options.throws) {
                throw e;
            }
        }
    }
    async function destroy() {
        await threadPool.destroy();
    }
    return {
        clearCache,
        executeStoryFile,
        destroy,
    };
}
