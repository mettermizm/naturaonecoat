import { fileURLToPath } from 'url';
import { ViteNodeRunner } from 'vite-node/client';
import { createBirpc } from 'birpc';
import { dirname, resolve } from 'pathe';
import { createDomEnv } from '../dom/env.js';
const __dirname = dirname(fileURLToPath(import.meta.url));
export default async (payload) => {
    const rpc = createBirpc({}, {
        post: data => payload.port.postMessage(data),
        on: data => payload.port.on('message', data),
    });
    const runner = new ViteNodeRunner({
        root: payload.root,
        base: payload.base,
        fetchModule(id) {
            return rpc.fetchModule(id);
        },
        resolveId(id, importer) {
            return rpc.resolveId(id, importer);
        },
    });
    const { destroy: destroyDomEnv } = createDomEnv();
    if (!global.CSS.supports) {
        global.CSS.supports = () => false;
    }
    const el = window.document.createElement('div');
    // Mount app to collect stories/variants
    const { run } = (await runner.executeFile(resolve(__dirname, './run.js')));
    const storyData = [];
    await run({
        file: payload.storyFile,
        storyData,
        el,
    });
    if (payload.storyFile.markdownFile) {
        const el = document.createElement('div');
        el.innerHTML = payload.storyFile.markdownFile.html;
        const text = el.textContent;
        storyData.forEach(s => {
            s.docsText = text;
        });
    }
    destroyDomEnv();
    return {
        storyData,
    };
};
