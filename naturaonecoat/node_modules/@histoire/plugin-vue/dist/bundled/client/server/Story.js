import { defineComponent, useAttrs, inject, provide, onMounted } from "vue";
const stub = { name: "StubbedComponent", render: () => null };
function autoStubComponents(vnodes) {
  for (const vnode of vnodes) {
    if (typeof vnode.type === "object" && vnode.type.name !== "HistoireVariant") {
      vnode.type = stub;
    }
    if (Array.isArray(vnode.children)) {
      autoStubComponents(vnode.children);
    }
  }
}
var Story = defineComponent({
  name: "HistoireStory",
  inheritAttrs: false,
  props: {
    title: {
      type: String,
      default: null
    },
    id: {
      type: String,
      default: null
    },
    group: {
      type: String,
      default: null
    },
    layout: {
      type: Object,
      default: () => ({ type: "single", iframe: true })
    },
    icon: {
      type: String,
      default: null
    },
    iconColor: {
      type: String,
      default: null
    },
    docsOnly: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    var _a, _b;
    const attrs = useAttrs();
    const story = {
      id: (_a = props.id) != null ? _a : attrs.data.id,
      title: (_b = props.title) != null ? _b : attrs.data.fileName,
      group: props.group,
      layout: props.layout,
      icon: props.icon,
      iconColor: props.iconColor,
      docsOnly: props.docsOnly,
      variants: []
    };
    const addStory = inject("addStory", null);
    addStory == null ? void 0 : addStory(story);
    provide("story", story);
    provide("addVariant", (variant) => {
      story.variants.push(variant);
    });
    onMounted(() => {
      if (!story.variants.length) {
        story.variants.push({
          id: "_default",
          title: "default"
        });
      }
    });
    return {
      story
    };
  },
  render() {
    var _a, _b;
    let suppressError = false;
    try {
      const vnodes = (_b = (_a = this.$slots).default) == null ? void 0 : _b.call(_a, {
        get state() {
          suppressError = true;
          return {};
        }
      });
      if (Array.isArray(vnodes)) {
        autoStubComponents(vnodes);
      }
      return vnodes;
    } catch (e) {
      if (!suppressError) {
        console.error(e);
      }
      return null;
    }
  }
});
export { Story as default };
