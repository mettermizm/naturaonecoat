import { reactive, createApp, onMounted } from "vue";
import { defineComponent, ref, onMounted as onMounted$1, watch, onBeforeUnmount, h } from "@histoire/vendors/vue";
import { applyState } from "@histoire/shared";
import { getTagName } from "../codegen.js";
import { registerGlobalComponents } from "./global-components.js";
import { RouterLinkStub } from "./RouterLinkStub.js";
import * as setup from "$histoire-setup";
import * as generatedSetup from "$histoire-generated-global-setup";
import { syncStateBundledAndExternal } from "./util.js";
var RenderStory = defineComponent({
  name: "RenderStory",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    },
    slotName: {
      type: String,
      default: "default"
    }
  },
  emits: {
    ready: () => true
  },
  setup(props, { emit }) {
    const sandbox = ref();
    let app;
    let mounting = false;
    const externalState = reactive({});
    syncStateBundledAndExternal(props.variant.state, externalState);
    function unmountVariant() {
      if (app) {
        app.unmount();
        app = null;
      }
    }
    async function mountVariant() {
      if (mounting)
        return;
      mounting = true;
      unmountVariant();
      let lastPropsTypesSnapshot;
      app = createApp({
        name: "RenderStorySubApp",
        setup() {
          onMounted(() => {
            mounting = false;
          });
        },
        render: () => {
          var _a, _b, _c, _d, _e;
          const vnodes = (_e = (_b = (_a = props.variant.slots()) == null ? void 0 : _a[props.slotName]) == null ? void 0 : _b.call(_a, {
            state: externalState
          })) != null ? _e : (_d = (_c = props.story.slots()) == null ? void 0 : _c[props.slotName]) == null ? void 0 : _d.call(_c, {
            state: externalState
          });
          if (props.slotName === "default" && !props.variant.autoPropsDisabled) {
            const propsTypes = scanForAutoProps(vnodes);
            const snapshot = JSON.stringify(propsTypes);
            if (!lastPropsTypesSnapshot || lastPropsTypesSnapshot !== snapshot) {
              applyState(props.variant.state, {
                _hPropDefs: propsTypes
              });
              if (!props.variant.state._hPropState) {
                applyState(props.variant.state, {
                  _hPropState: {}
                });
              }
              lastPropsTypesSnapshot = snapshot;
            }
          }
          return vnodes;
        }
      });
      registerGlobalComponents(app);
      app.component("RouterLink", RouterLinkStub);
      if (typeof (generatedSetup == null ? void 0 : generatedSetup.setupVue3) === "function") {
        await generatedSetup.setupVue3({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      if (typeof (setup == null ? void 0 : setup.setupVue3) === "function") {
        await setup.setupVue3({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      if (typeof props.variant.setupApp === "function") {
        await props.variant.setupApp({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      const target = document.createElement("div");
      sandbox.value.appendChild(target);
      app.mount(target);
      emit("ready");
    }
    function scanForAutoProps(vnodes) {
      var _a, _b;
      const result = [];
      let index = 0;
      for (const vnode of vnodes) {
        if (typeof vnode.type === "object") {
          const propDefs = [];
          for (const key in vnode.type.props) {
            const prop = vnode.type.props[key];
            let types;
            let defaultValue;
            if (prop) {
              const rawTypes = Array.isArray(prop.type) ? prop.type : typeof prop === "function" ? [prop] : [prop.type];
              types = rawTypes.map((t) => {
                switch (t) {
                  case String:
                    return "string";
                  case Number:
                    return "number";
                  case Boolean:
                    return "boolean";
                  case Object:
                    return "object";
                  case Array:
                    return "array";
                  default:
                    return "unknown";
                }
              });
              defaultValue = typeof prop.default === "function" ? prop.default.toString() : prop.default;
            }
            propDefs.push({
              name: key,
              types,
              required: prop == null ? void 0 : prop.required,
              default: defaultValue
            });
            if (((_b = (_a = externalState == null ? void 0 : externalState._hPropState) == null ? void 0 : _a[index]) == null ? void 0 : _b[key]) != null) {
              if (!vnode.props) {
                vnode.props = {};
              }
              vnode.props[key] = externalState._hPropState[index][key];
              if (!vnode.dynamicProps) {
                vnode.dynamicProps = [];
              }
              if (!vnode.dynamicProps.includes(key)) {
                vnode.dynamicProps.push(key);
              }
            }
          }
          result.push({
            name: getTagName(vnode),
            index,
            props: propDefs
          });
          index++;
        }
        if (Array.isArray(vnode.children)) {
          result.push(...scanForAutoProps(vnode.children));
        }
      }
      return result.filter((def) => def.props.length);
    }
    onMounted$1(async () => {
      if (props.variant.configReady) {
        await mountVariant();
      }
    });
    watch(() => props.variant, async (value) => {
      if (value.configReady && !mounting) {
        if (!app) {
          await mountVariant();
        } else {
          app._instance.proxy.$forceUpdate();
        }
      }
    }, {
      deep: true
    });
    onBeforeUnmount(() => {
      unmountVariant();
    });
    return {
      sandbox
    };
  },
  render() {
    return h("div", {
      ref: "sandbox",
      class: "__histoire-sandbox htw-overflow-auto"
    });
  }
});
export { RenderStory as default };
