import { defineComponent, ref, onBeforeUpdate, onMounted, onUpdated, onBeforeUnmount, h as h$1 } from "vue";
import { reactive, createApp, h } from "@histoire/vendors/vue";
import { components } from "@histoire/controls";
import Story from "./Story.js";
import Variant from "./Variant.js";
function registerGlobalComponents(app) {
  app.component("Story", Story);
  app.component("Variant", Variant);
  for (const key in components) {
    app.component(key, wrapControlComponent(components[key]));
  }
}
function wrapControlComponent(controlComponent) {
  return defineComponent({
    name: controlComponent.name,
    inheritAttrs: false,
    setup(props, { attrs }) {
      const el = ref();
      const slotEl = ref();
      const state = reactive({});
      function applyState(data) {
        Object.assign(state, data);
      }
      applyState(attrs);
      onBeforeUpdate(() => {
        applyState(attrs);
      });
      let newSlotCalls = [];
      const slotCalls = ref([]);
      function moveSlotContent() {
        slotCalls.value.forEach((props2, index) => {
          const renderedEl = slotEl.value.querySelector(`[renderslotid="${index}"]`);
          if (!renderedEl)
            return;
          const targetEl = el.value.querySelector(`[slotid="${index}"]`);
          while (targetEl.firstChild) {
            targetEl.removeChild(targetEl.lastChild);
          }
          targetEl.appendChild(renderedEl);
        });
      }
      let app;
      onMounted(() => {
        app = createApp({
          mounted() {
            slotCalls.value = newSlotCalls;
            newSlotCalls = [];
          },
          updated() {
            slotCalls.value = newSlotCalls;
            newSlotCalls = [];
          },
          render() {
            return h(controlComponent, {
              ...state,
              key: "component"
            }, {
              default: (props2) => {
                newSlotCalls.push(props2);
                return h("div", {
                  slotId: newSlotCalls.length - 1
                });
              }
            });
          }
        });
        app.mount(el.value);
      });
      onUpdated(() => {
        moveSlotContent();
      });
      onBeforeUnmount(() => {
        app.unmount();
      });
      return {
        el,
        slotEl,
        slotCalls
      };
    },
    render() {
      return [
        h$1("div", {
          ref: "el"
        }),
        h$1("div", {
          ref: "slotEl"
        }, this.slotCalls.map((props, index) => h$1("div", {
          renderSlotId: index
        }, this.$slots.default(props))))
      ];
    }
  });
}
export { registerGlobalComponents };
