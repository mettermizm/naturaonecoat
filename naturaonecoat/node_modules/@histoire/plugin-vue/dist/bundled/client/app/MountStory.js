import { createApp, h, Suspense } from "vue";
import { defineComponent, ref, watch, onMounted, onUnmounted, h as h$1 } from "@histoire/vendors/vue";
import * as setup from "$histoire-setup";
import * as generatedSetup from "$histoire-generated-global-setup";
import { registerGlobalComponents } from "./global-components.js";
import { RouterLinkStub } from "./RouterLinkStub.js";
var MountStory = defineComponent({
  name: "MountStory",
  props: {
    story: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const el = ref();
    let app;
    async function mountStory() {
      app = createApp({
        name: "MountStorySubApp",
        render: () => {
          return h(Suspense, [
            h(props.story.file.component, {
              story: props.story
            })
          ]);
        }
      });
      registerGlobalComponents(app);
      app.component("RouterLink", RouterLinkStub);
      if (typeof (generatedSetup == null ? void 0 : generatedSetup.setupVue3) === "function") {
        await generatedSetup.setupVue3({
          app,
          story: props.story,
          variant: null
        });
      }
      if (typeof (setup == null ? void 0 : setup.setupVue3) === "function") {
        await setup.setupVue3({
          app,
          story: props.story,
          variant: null
        });
      }
      const target = document.createElement("div");
      el.value.appendChild(target);
      app.mount(target);
    }
    function unmountStory() {
      app == null ? void 0 : app.unmount();
    }
    watch(() => props.story.id, async () => {
      unmountStory();
      await mountStory();
    });
    onMounted(async () => {
      await mountStory();
    });
    onUnmounted(() => {
      unmountStory();
    });
    return {
      el
    };
  },
  render() {
    return h$1("div", {
      ref: "el"
    });
  }
});
export { MountStory as default };
