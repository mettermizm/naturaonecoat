import { defineComponent, useAttrs, getCurrentInstance, inject } from "vue";
import { applyState } from "@histoire/shared";
import { toRawDeep, syncStateBundledAndExternal } from "./util.js";
var Variant = defineComponent({
  name: "Variant",
  __histoireType: "variant",
  props: {
    initState: {
      type: Function,
      default: null
    },
    source: {
      type: String,
      default: null
    },
    responsiveDisabled: {
      type: Boolean,
      default: false
    },
    autoPropsDisabled: {
      type: Boolean,
      default: false
    },
    setupApp: {
      type: Function,
      default: null
    }
  },
  async setup(props) {
    const attrs = useAttrs();
    const vm = getCurrentInstance();
    const implicitState = inject("implicitState");
    if (typeof props.initState === "function") {
      const state = await props.initState();
      applyState(attrs.variant.state, toRawDeep(state));
    }
    syncStateBundledAndExternal(attrs.variant.state, implicitState());
    function updateVariant() {
      Object.assign(attrs.variant, {
        slots: () => vm.proxy.$slots,
        source: props.source,
        responsiveDisabled: props.responsiveDisabled,
        autoPropsDisabled: props.autoPropsDisabled,
        setupApp: props.setupApp,
        configReady: true
      });
    }
    updateVariant();
    return {
      updateVariant
    };
  },
  render() {
    this.updateVariant();
    return null;
  }
});
export { Variant as default };
