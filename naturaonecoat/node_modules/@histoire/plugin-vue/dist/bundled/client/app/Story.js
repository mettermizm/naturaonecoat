import { defineComponent, getCurrentInstance, useAttrs, computed, provide, reactive, h } from "vue";
import Variant from "./Variant.js";
var Story = defineComponent({
  name: "Story",
  __histoireType: "story",
  inheritAttrs: false,
  props: {
    initState: {
      type: Function,
      default: null
    }
  },
  setup() {
    const vm = getCurrentInstance();
    const attrs = useAttrs();
    const story = computed(() => attrs.story);
    provide("story", story);
    const storyComponent = vm.parent;
    const implicitState = {
      $data: storyComponent.data
    };
    function addImplicitState(key, value) {
      if (typeof value === "function" || (value == null ? void 0 : value.__file) || typeof (value == null ? void 0 : value.render) === "function" || typeof (value == null ? void 0 : value.setup) === "function") {
        return;
      }
      implicitState[key] = value;
    }
    for (const key in storyComponent.exposed) {
      addImplicitState(key, storyComponent.exposed[key]);
    }
    for (const key in storyComponent.devtoolsRawSetupState) {
      addImplicitState(key, storyComponent.devtoolsRawSetupState[key]);
    }
    provide("implicitState", () => reactive({ ...implicitState }));
    function updateStory() {
      Object.assign(attrs.story, {
        slots: () => vm.proxy.$slots
      });
    }
    return {
      story,
      updateStory
    };
  },
  render() {
    this.updateStory();
    const [firstVariant] = this.story.variants;
    if (firstVariant.id === "_default") {
      return h(Variant, {
        variant: firstVariant,
        initState: this.initState,
        ...this.$attrs
      }, this.$slots);
    }
    let index = 0;
    const applyAttrs = (vnodes2) => {
      var _a, _b;
      for (const vnode of vnodes2) {
        if (((_a = vnode.type) == null ? void 0 : _a.__histoireType) === "variant") {
          if (!vnode.props) {
            vnode.props = {};
          }
          vnode.props.variant = this.story.variants[index];
          if (!vnode.props.initState && !vnode.props["init-state"]) {
            vnode.props.initState = this.initState;
          }
          for (const attr in this.$attrs) {
            if (typeof vnode.props[attr] === "undefined") {
              vnode.props[attr] = this.$attrs[attr];
            }
          }
          index++;
        } else if ((_b = vnode.children) == null ? void 0 : _b.length) {
          applyAttrs(vnode.children);
        }
      }
    };
    const vnodes = this.$slots.default();
    applyAttrs(vnodes);
    return vnodes;
  }
});
export { Story as default };
