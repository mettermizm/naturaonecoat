import { pushScopeId, popScopeId, defineComponent, useCssVars, unref, toRefs, ref, resolveComponent, openBlock, createElementBlock, createElementVNode, createVNode, normalizeClass, withCtx, toDisplayString, withModifiers, createBlock } from "@histoire/vendors/vue";
import { Icon } from "@histoire/vendors/iconify";
import { useRouter } from "@histoire/vendors/vue-router";
import { useResizeObserver } from "@histoire/vendors/vue-use";
import _sfc_main$1 from "./GenericRenderStory.js";
import { useCurrentVariantRoute } from "../../util/variant.js";
import { useScrollOnActive } from "../../util/scroll.js";
import "./StoryVariantGridItem.vue_vue_type_style_index_0_scoped_true_lang.js";
import _export_sfc from "../../_virtual/plugin-vue_export-helper.js";
const _withScopeId = (n) => (pushScopeId("data-v-2db4d3d2"), n = n(), popScopeId(), n);
const _hoisted_1 = { class: "htw-flex-none htw-flex htw-items-center" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "StoryVariantGridItem",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    }
  },
  emits: {
    resize: (width, height) => true
  },
  setup(__props, { emit }) {
    const props = __props;
    useCssVars((_ctx) => ({
      "1eec3e4a": unref(variant).iconColor
    }));
    const { variant } = toRefs(props);
    const { isActive, targetRoute } = useCurrentVariantRoute(variant);
    Object.assign(props.variant, {
      previewReady: false
    });
    function onReady() {
      Object.assign(props.variant, {
        previewReady: true
      });
    }
    const router = useRouter();
    function selectVariant() {
      router.push(targetRoute.value);
    }
    const el = ref();
    const { autoScroll } = useScrollOnActive(isActive, el);
    useResizeObserver(el, () => {
      if (props.variant.previewReady) {
        emit("resize", el.value.clientWidth, el.value.clientHeight);
        if (isActive.value) {
          autoScroll();
        }
      }
    });
    return (_ctx, _cache) => {
      const _component_RouterLink = resolveComponent("RouterLink");
      return openBlock(), createElementBlock("div", {
        ref_key: "el",
        ref: el,
        class: "htw-cursor-default htw-flex htw-flex-col htw-gap-y-1"
      }, [
        createElementVNode("div", _hoisted_1, [
          createVNode(_component_RouterLink, {
            to: unref(targetRoute),
            class: normalizeClass(["htw-rounded htw-w-max htw-px-2 htw-py-0.5 htw-min-w-16 htw-cursor-pointer htw-flex htw-items-center htw-gap-1", {
              "hover:htw-bg-gray-200 htw-text-gray-500 dark:hover:htw-bg-gray-800": !unref(isActive),
              "htw-bg-primary-200 hover:htw-bg-primary-300 htw-text-primary-800 dark:htw-bg-primary-700 dark:hover:htw-bg-primary-800 dark:htw-text-primary-200": unref(isActive)
            }])
          }, {
            default: withCtx(() => {
              var _a;
              return [
                createVNode(unref(Icon), {
                  icon: (_a = unref(variant).icon) != null ? _a : "carbon:cube",
                  class: normalizeClass(["base-list-item-link-icon htw-w-4 htw-h-4 htw-opacity-50", {
                    "htw-text-gray-500": !unref(isActive) && !unref(variant).iconColor,
                    "bind-icon-color": !unref(isActive) && unref(variant).iconColor
                  }])
                }, null, 8, ["icon", "class"]),
                createElementVNode("span", null, toDisplayString(unref(variant).title), 1)
              ];
            }),
            _: 1
          }, 8, ["to", "class"])
        ]),
        createElementVNode("div", {
          class: normalizeClass(["htw-border htw-bg-white dark:htw-bg-gray-700 htw-rounded-lg htw-flex-1 htw-p-4", {
            "htw-border-gray-100 dark:htw-border-gray-800": !unref(isActive),
            "htw-border-primary-200 dark:htw-border-primary-900": unref(isActive)
          }]),
          "data-test-id": "sandbox-render",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => selectVariant(), ["stop"])),
          onKeyup: _cache[1] || (_cache[1] = ($event) => selectVariant())
        }, [
          (openBlock(), createBlock(_sfc_main$1, {
            key: `${__props.story.id}-${unref(variant).id}`,
            variant: unref(variant),
            story: __props.story,
            onReady
          }, null, 8, ["variant", "story"]))
        ], 34)
      ], 512);
    };
  }
});
var StoryVariantGridItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-2db4d3d2"]]);
export { StoryVariantGridItem as default };
