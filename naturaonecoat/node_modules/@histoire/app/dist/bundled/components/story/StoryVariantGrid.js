import { defineComponent, computed, ref, watch, openBlock, createElementBlock, createElementVNode, normalizeStyle, unref, Fragment, renderList, createBlock } from "@histoire/vendors/vue";
import { useResizeObserver } from "@histoire/vendors/vue-use";
import { useStoryStore } from "../../stores/story.js";
import StoryVariantGridItem from "./StoryVariantGridItem.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "StoryVariantGrid",
  setup(__props) {
    const storyStore = useStoryStore();
    const gridTemplateWidth = computed(() => {
      if (storyStore.currentStory.layout.type !== "grid") {
        return;
      }
      const layoutWidth = storyStore.currentStory.layout.width;
      if (!layoutWidth) {
        return "200px";
      }
      if (typeof layoutWidth === "number") {
        return layoutWidth + "px";
      }
      return layoutWidth;
    });
    const margin = 16;
    const gap = 16;
    const itemWidth = ref(16);
    const maxItemHeight = ref(0);
    const maxCount = ref(10);
    const countPerRow = ref(0);
    const visibleRows = ref(0);
    const el = ref(null);
    useResizeObserver(el, () => {
      updateMaxCount();
    });
    function updateMaxCount() {
      if (!maxItemHeight.value)
        return;
      const width = el.value.clientWidth - margin * 2;
      const height = el.value.clientHeight;
      const scrollTop = el.value.scrollTop;
      countPerRow.value = Math.floor((width + gap) / (itemWidth.value + gap));
      visibleRows.value = Math.ceil((height + scrollTop + gap) / (maxItemHeight.value + gap));
      const newMaxCount = countPerRow.value * visibleRows.value;
      if (maxCount.value < newMaxCount) {
        maxCount.value = newMaxCount;
      }
      if (storyStore.currentVariant) {
        const index = storyStore.currentStory.variants.indexOf(storyStore.currentVariant);
        if (index + 1 > maxCount.value) {
          maxCount.value = index + 1;
        }
      }
    }
    function onItemResize(w, h) {
      itemWidth.value = w;
      if (maxItemHeight.value < h) {
        maxItemHeight.value = h;
        updateMaxCount();
      }
    }
    watch(() => storyStore.currentVariant, () => {
      updateMaxCount();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "el",
        ref: el,
        class: "htw-h-full htw-overflow-y-auto",
        onScroll: _cache[0] || (_cache[0] = ($event) => updateMaxCount())
      }, [
        createElementVNode("div", {
          style: normalizeStyle({
            minHeight: `${unref(storyStore).currentStory.variants.length / countPerRow.value * (maxItemHeight.value + gap) - gap}px`
          })
        }, [
          createElementVNode("div", {
            class: "htw-grid htw-gap-4 htw-m-4",
            style: normalizeStyle({
              gridTemplateColumns: `repeat(auto-fill, ${unref(gridTemplateWidth)})`
            })
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(storyStore).currentStory.variants.slice(0, maxCount.value), (variant, index) => {
              return openBlock(), createBlock(StoryVariantGridItem, {
                key: index,
                variant,
                story: unref(storyStore).currentStory,
                onResize: onItemResize
              }, null, 8, ["variant", "story"]);
            }), 128))
          ], 4)
        ], 4)
      ], 544);
    };
  }
});
export { _sfc_main as default };
