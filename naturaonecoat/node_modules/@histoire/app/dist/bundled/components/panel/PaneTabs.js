import { createTextVNode, defineComponent, toRefs, computed, openBlock, createBlock, withCtx, createVNode, normalizeClass, unref, createElementBlock, toDisplayString, createCommentVNode } from "@histoire/vendors/vue";
import BaseTab from "../base/BaseTab.js";
import { useEventsStore } from "../../stores/events.js";
import _sfc_main$1 from "../base/BaseOverflowMenu.js";
import BaseOverflowTab from "../base/BaseOverflowTab.js";
import { useStoryDoc } from "./StoryDocs.js";
const _hoisted_1 = /* @__PURE__ */ createTextVNode(" Controls ");
const _hoisted_2 = /* @__PURE__ */ createTextVNode(" Docs ");
const _hoisted_3 = /* @__PURE__ */ createTextVNode(" Events ");
const _hoisted_4 = {
  key: 0,
  class: "htw-text-center htw-text-xs htw-mx-1 htw-px-0.5 htw-h-4 htw-min-w-4 htw-rounded-full active htw-bg-primary-500 htw-text-white dark:htw-text-black"
};
const _hoisted_5 = /* @__PURE__ */ createTextVNode(" Controls ");
const _hoisted_6 = /* @__PURE__ */ createTextVNode(" Docs ");
const _hoisted_7 = /* @__PURE__ */ createTextVNode(" Events ");
const _hoisted_8 = {
  key: 0,
  class: "htw-text-center htw-text-xs htw-mx-1 htw-px-0.5 htw-h-4 htw-min-w-4 htw-rounded-full active htw-bg-primary-500 htw-text-white dark:htw-text-black"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "PaneTabs",
  props: {
    story: null,
    variant: null
  },
  setup(__props) {
    const props = __props;
    const { story } = toRefs(props);
    const { renderedDoc } = useStoryDoc(story);
    const eventsStore = useEventsStore();
    const hasEvents = computed(() => eventsStore.events.length);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$1, { class: "htw-h-10 htw-flex-none htw-border-b htw-border-gray-100 dark:htw-border-gray-750" }, {
        overflow: withCtx(() => [
          createVNode(BaseOverflowTab, {
            to: { ..._ctx.$route, query: { ..._ctx.$route.query, tab: "" } },
            matched: !_ctx.$route.query.tab
          }, {
            default: withCtx(() => [
              _hoisted_5
            ]),
            _: 1
          }, 8, ["to", "matched"]),
          createVNode(BaseOverflowTab, {
            to: { ..._ctx.$route, query: { ..._ctx.$route.query, tab: "docs" } },
            matched: _ctx.$route.query.tab === "docs",
            class: normalizeClass({
              "opacity-50": !unref(renderedDoc)
            })
          }, {
            default: withCtx(() => [
              _hoisted_6
            ]),
            _: 1
          }, 8, ["to", "matched", "class"]),
          createVNode(BaseOverflowTab, {
            to: { ..._ctx.$route, query: { ..._ctx.$route.query, tab: "events" } },
            matched: _ctx.$route.query.tab === "events",
            class: normalizeClass({
              "htw-opacity-50": !unref(hasEvents)
            })
          }, {
            default: withCtx(() => [
              _hoisted_7,
              unref(eventsStore).unseen ? (openBlock(), createElementBlock("span", _hoisted_8, toDisplayString(unref(eventsStore).unseen <= 99 ? unref(eventsStore).unseen : "99+"), 1)) : createCommentVNode("", true)
            ]),
            _: 1
          }, 8, ["to", "matched", "class"])
        ]),
        default: withCtx(() => [
          createVNode(BaseTab, {
            to: { ..._ctx.$route, query: { ..._ctx.$route.query, tab: "" } },
            matched: !_ctx.$route.query.tab
          }, {
            default: withCtx(() => [
              _hoisted_1
            ]),
            _: 1
          }, 8, ["to", "matched"]),
          createVNode(BaseTab, {
            to: { ..._ctx.$route, query: { ..._ctx.$route.query, tab: "docs" } },
            matched: _ctx.$route.query.tab === "docs",
            class: normalizeClass({
              "htw-opacity-50": !unref(renderedDoc)
            })
          }, {
            default: withCtx(() => [
              _hoisted_2
            ]),
            _: 1
          }, 8, ["to", "matched", "class"]),
          createVNode(BaseTab, {
            to: { ..._ctx.$route, query: { ..._ctx.$route.query, tab: "events" } },
            matched: _ctx.$route.query.tab === "events",
            class: normalizeClass({
              "htw-opacity-50": !unref(hasEvents)
            })
          }, {
            default: withCtx(() => [
              _hoisted_3,
              unref(eventsStore).unseen ? (openBlock(), createElementBlock("span", _hoisted_4, toDisplayString(unref(eventsStore).unseen <= 99 ? unref(eventsStore).unseen : "99+"), 1)) : createCommentVNode("", true)
            ]),
            _: 1
          }, 8, ["to", "matched", "class"])
        ]),
        _: 1
      });
    };
  }
});
export { _sfc_main as default };
